/*******************************************
如果一个整数不为0，那么这个整数至少有一位是1。
如果我们把这个整数减1，那么原来处在整数最右边
的1就会变为0，原来在1后面的所有的0都会变成1(如
果最右边的1后面还有0的话)。其余所有位将不会受到
影响。
举个例子：一个二进制数1100，从右边数起第三位是
处于最右边的一个1。减去1后，第三位变成0，它后面
的两位0变成了1，而前面的1保持不变，因此得到的结
果是1011.我们发现减1的结果是把最右边的一个1开始
的所有位都取反了。这个时候如果我们再把原来的整数
和减去1之后的结果做与运算，从原来整数最右边一个1
那一位开始所有位都会变成0。如1100&1011=1000.也就
是说，把一个整数减去1，再和原整数做与运算，
会把该整数最右边一个1变成0.那么一个整数的二进制
有多少个1，就可以进行多少次这样的操作。
*******************************************/
#include<iostream>
using namespace std;

int  NumberOf1(int n) {
	int co = 0;//记录二进制数中1的个数
	while (n != 0) {
		++co;
		n = n & (n - 1);
	}
	return co;
}

int NumberOf0(int n) {
	int co = 0;//记录二进制数中0的个数
	while (n+1)
	{
		co++;
		n = n | (n + 1);
	}
	return co;
}

//int main()
//{
//	cout << NumberOf0(2014) << endl;
//	return 0;
//}